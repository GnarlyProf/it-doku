// <auto-generated />
using System;
using ITDoku.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ITDoku.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250921122515_Fix_DeviceIp_DokuObject_Relation")]
    partial class Fix_DeviceIp_DokuObject_Relation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DeviceIp", b =>
                {
                    b.Property<int>("DeviceIpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeviceIpId"));

                    b.Property<int>("AssignmentType")
                        .HasColumnType("int");

                    b.Property<Guid>("DokuObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DokuObjectId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Gateway")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InterfaceName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubnetMask")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("VlanId")
                        .HasColumnType("int");

                    b.HasKey("DeviceIpId");

                    b.HasIndex("DokuObjectId");

                    b.HasIndex("DokuObjectId1");

                    b.HasIndex("DokuObjectId", "IpAddress")
                        .IsUnique();

                    b.ToTable("DeviceIPs", (string)null);
                });

            modelBuilder.Entity("ITDoku.Models.DokuFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ByteSize")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ContentType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ObjectId");

                    b.ToTable("Files", (string)null);
                });

            modelBuilder.Entity("ITDoku.Models.DokuFileVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ByteSize")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ContentType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FileId", "Version")
                        .IsUnique();

                    b.ToTable("FileVersions", (string)null);
                });

            modelBuilder.Entity("ITDoku.Models.DokuLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TargetObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TargetObjectId");

                    b.HasIndex("ParentId", "TargetObjectId")
                        .IsUnique();

                    b.ToTable("Links", (string)null);
                });

            modelBuilder.Entity("ITDoku.Models.DokuObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte>("NodeType")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId", "SortOrder");

                    b.ToTable("Objects", null, t =>
                        {
                            t.HasCheckConstraint("CK_DokuObject_Level", "[Level] BETWEEN 0 AND 10");
                        });
                });

            modelBuilder.Entity("ITDoku.Models.DokuSecret", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordEnc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ObjectId")
                        .IsUnique();

                    b.ToTable("Secrets", (string)null);
                });

            modelBuilder.Entity("Network", b =>
                {
                    b.Property<int>("NetworkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NetworkId"));

                    b.Property<Guid?>("AssignedToDokuObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CidrNotation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DhcpRangeEnd")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DhcpRangeStart")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DnsServer")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("NetworkId");

                    b.HasIndex("AssignedToDokuObjectId");

                    b.HasIndex("CidrNotation")
                        .IsUnique();

                    b.ToTable("Networks", (string)null);
                });

            modelBuilder.Entity("DeviceIp", b =>
                {
                    b.HasOne("ITDoku.Models.DokuObject", "DokuObject")
                        .WithMany()
                        .HasForeignKey("DokuObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITDoku.Models.DokuObject", null)
                        .WithMany("DeviceIps")
                        .HasForeignKey("DokuObjectId1");

                    b.Navigation("DokuObject");
                });

            modelBuilder.Entity("ITDoku.Models.DokuFile", b =>
                {
                    b.HasOne("ITDoku.Models.DokuObject", "DokuObject")
                        .WithMany("Files")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DokuObject");
                });

            modelBuilder.Entity("ITDoku.Models.DokuFileVersion", b =>
                {
                    b.HasOne("ITDoku.Models.DokuFile", "File")
                        .WithMany("Versions")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("ITDoku.Models.DokuLink", b =>
                {
                    b.HasOne("ITDoku.Models.DokuObject", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ITDoku.Models.DokuObject", "TargetObject")
                        .WithMany()
                        .HasForeignKey("TargetObjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("TargetObject");
                });

            modelBuilder.Entity("ITDoku.Models.DokuObject", b =>
                {
                    b.HasOne("ITDoku.Models.DokuObject", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ITDoku.Models.DokuSecret", b =>
                {
                    b.HasOne("ITDoku.Models.DokuObject", "DokuObject")
                        .WithMany()
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DokuObject");
                });

            modelBuilder.Entity("Network", b =>
                {
                    b.HasOne("ITDoku.Models.DokuObject", "AssignedToDokuObject")
                        .WithMany()
                        .HasForeignKey("AssignedToDokuObjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AssignedToDokuObject");
                });

            modelBuilder.Entity("ITDoku.Models.DokuFile", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("ITDoku.Models.DokuObject", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("DeviceIps");

                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
